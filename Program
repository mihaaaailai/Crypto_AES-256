#include <iostream>
#include <string>
#include <cryptopp/aes.h>
#include <cryptopp/modes.h>
#include <cryptopp/filters.h>
#include <cryptopp/hex.h>
#include <cryptopp/osrng.h>

int main() {
    // Initialize Crypto++ Random Number Generator
    CryptoPP::AutoSeededRandomPool rng;

    // AES-256 key (32 bytes)
    byte key[CryptoPP::AES::MAX_KEYLENGTH];
    rng.GenerateBlock(key, sizeof(key));

    // Initialization Vector (IV) for CBC mode (16 bytes)
    byte iv[CryptoPP::AES::BLOCKSIZE];
    rng.GenerateBlock(iv, sizeof(iv));

    // Plain text message
    std::string plainText = "This is a test message for AES-256 encryption.";

    std::string cipherText;
    std::string decryptedText;

    try {
        // Encryption
        CryptoPP::AES::Encryption aesEncryption(key, sizeof(key));
        CryptoPP::CBC_Mode_ExternalCipher::Encryption cbcEncryption(aesEncryption, iv);

        CryptoPP::StringSource(plainText, true,
            new CryptoPP::StreamTransformationFilter(cbcEncryption,
                new CryptoPP::StringSink(cipherText)
            )
        );

        // Decryption
        CryptoPP::AES::Decryption aesDecryption(key, sizeof(key));
        CryptoPP::CBC_Mode_ExternalCipher::Decryption cbcDecryption(aesDecryption, iv);

        CryptoPP::StringSource(cipherText, true,
            new CryptoPP::StreamTransformationFilter(cbcDecryption,
                new CryptoPP::StringSink(decryptedText)
            )
        );

        // Output
        std::cout << "Original Text: " << plainText << std::endl;
        std::cout << "Encrypted Text: " << cipherText << std::endl;
        std::cout << "Decrypted Text: " << decryptedText << std::endl;
    } catch (const CryptoPP::Exception& e) {
        std::cerr << "Crypto++ exception: " << e.what() << std::endl;
        return 1;
    }

    return 0;
}
